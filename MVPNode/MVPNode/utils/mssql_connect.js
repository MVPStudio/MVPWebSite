/**
 * Custom module is used to connect to the database we are using for storage of user data
 */
const mssql = require('mssql');

// Make sure the mssql connection closes on an error
mssql.on("error", function(err) {
    mssql.close();
});

// Get the configuration file, and give a nice error if it can't be found
var config;
try {
    config = require('../sql_config/sql_config.js');
} catch (e) {
    console.error("ERROR: The sql_config.js file could not be found! This file is required to connect to the database, however\n" +
                  "it is NOT provided in the repository and must be added to the correct folder manually");

    throw(e);
}

var MSSQLConnect = function () {};

/**
 * Used to make a query to the databse. This function takes a query object generated by the 'sql' javascript library. The results
 * of the query are provided to the callback
 * 
 * This is a public helper function used to consilidate code. For non-testing purposes a function relating to a specific
 * query should be used
 * 
 * The callback should be of the form `cb(data, err)`. When there is an error, `data` is NULL and the `err` argument is populated
 */
MSSQLConnect.prototype.query = function (query, cb) {

    // To prevent crashes, make sure there is a callback
    if (!cb) cb = function() {};

    const dynamicPool = new mssql.ConnectionPool(config, function(err) {
        if (err) {
            // There was an error connecting!
            cb(null, err);
            return;
        }

        dynamicPool.request().query(query, function(err, res){
            if (err) {
                // There was an error with the query
                cb(null, err);
                return;
            }

            // There was no error with the query! Close the request and Return the response data
            cb(res);
            dynamicPool.close();
        });
    });

    dynamicPool.on('error', function(err) {
        // If there is an error, close the pool
        dynamicPool.close();
    });
}

/**
 * Will provide all of the rows from all of the columns of the provided table to a callback function
 * 
 * The callback should be of the form `cb(data, err)`. When there is an error, `data` is NULL and the `err` argument is populated
 */
MSSQLConnect.prototype.selectAll = function(tableName, cb) {
    var q = "SELECT * FROM " + tableName;

    this.query(q, cb);
}

/**
 * Will provide a table row with the provided email to a callback function
 * 
 * The callback should be of the form `cb(data, err)`. When there is an error, `data` is NULL and the `err` argument is populated
 */
MSSQLConnect.prototype.selectWithEmail = function(tableName, email, cb) {

}

module.exports = new MSSQLConnect();
